# JMH version: 1.36
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1-b2043.17
# VM invoker: /Users/arno/Library/Java/JavaVirtualMachines/jbr-11.0.14.1/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=FR -Duser.language=fr -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.koin.benchmark.BenchmarkClass.statrKoinAndInject

# Run progress: 0,00% complete, ETA 00:00:20
# Fork: 1 of 2
Iteration   1: 0,348 ms/op
Iteration   2: 0,265 ms/opING [8s]
Iteration   3: 0,256 ms/opING [10s]
Iteration   4: 0,254 ms/opING [12s]
Iteration   5: 0,256 ms/opING [14s]

# Run progress: 50,00% complete, ETA 00:00:10
# Fork: 2 of 2
Iteration   1: 0,324 ms/opING [16s]
Iteration   2: 0,259 ms/opING [18s]
Iteration   3: 0,255 ms/opING [20s]
Iteration   4: 0,254 ms/opING [22s]
Iteration   5: 0,254 ms/opING [24s]


Result "org.koin.benchmark.BenchmarkClass.statrKoinAndInject":
  0,272 ±(99.9%) 0,052 ms/op [Average]
  (min, avg, max) = (0,254, 0,272, 0,348), stdev = 0,034
  CI (99.9%): [0,221, 0,324] (assumes normal distribution)


# Run complete. Total time: 00:00:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt  Score   Error  Units
BenchmarkClass.statrKoinAndInject  avgt   10  0,272 ± 0,052  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.4.2/userguide/command_line_interface.html#sec:command_line_warnings